pipeline CountryStatsPipeline {

  // Step 1: Download the Excel file
  block DownloadExcel oftype HttpExtractor {
    url: "https://thedocs.worldbank.org/en/doc/7d852628d96b9411d43e5d36d5dff941-0050062022/original/Graphs-Chapter-5-02082022.xlsx";
  }

  // Step 2: Interpret the downloaded Excel file
  block ParseExcel oftype XLSXInterpreter {}

  // Step 3: Select the required sheet
  block SelectSheet oftype SheetPicker {
    sheetName: "Figure S5.1.2";
  }

  // Step 4: Rename column headers
  block RenameHeaders oftype CellWriter {
    at: range P2:S2;
    write: [
      "Country Code",        // from "ISO3"
      "Economy",             // unchanged
      "GDP Per Capita",      // updated for clarity
      "Bond Issuance Share"  // adjusted for readability
    ];
  }

  // Step 5: Focus on the specified range of data
  block SpecifyDataRange oftype CellRangeSelector {
    select: range P2:S45;
  }

  // Step 6: Validate and extract bond-related data
  block PrepareBondData oftype TableInterpreter {
    header: true;
    columns: [
      "Country Code" oftype CountryCodeAlpha3,
      "Bond Issuance Share" oftype ValidBondShare
    ];
  }

  // Step 7: Validate and extract GDP-related data
  block PrepareGdpData oftype TableInterpreter {
    header: true;
    columns: [
      "Country Code" oftype CountryCodeAlpha3,
      "GDP Per Capita" oftype ValidGDP
    ];
  }

  // Step 8: Store bond-related data in the SQLite database
  block SaveBondData oftype SQLiteLoader {
    table: "bondIssuance";
    file: "./country-stats.sqlite";
  }

  // Step 9: Store GDP-related data in the SQLite database
  block SaveGdpData oftype SQLiteLoader {
    table: "gdpPerCapita";
    file: "./country-stats.sqlite";
  }

  // Define constraints for validation
  valuetype CountryCodeAlpha3 oftype text {
    constraints: [ValidCountryCode];
  }

  constraint ValidCountryCode on text:
    value matches /^[A-Z]{3}$/;

  valuetype ValidGDP oftype integer {
    constraints: [PositiveGDP];
  }

  constraint PositiveGDP on integer:
    value > 0;

  valuetype ValidBondShare oftype decimal {
    constraints: [BondShareRange];
  }

  constraint BondShareRange on decimal:
    value >= 0 and value <= 1;

  // Define the workflow for processing and storing data
  DownloadExcel
    -> ParseExcel
    -> SelectSheet
    -> RenameHeaders
    -> SpecifyDataRange;

  // Fork the workflow for bond and GDP data
  SpecifyDataRange
    -> PrepareBondData
    -> SaveBondData;

  SpecifyDataRange
    -> PrepareGdpData
    -> SaveGdpData;
}
